---
title: "Topik 2 | Data Preparation"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

Data preparation atau data wrangling adalah proses yang memakan waktu dan tenaga paling besar bagi seorang data analyst/scientist, yaitu sampai 80 persen. Detailnya, pembacaan sumber data memakan waktu sampai 20 persen, dan mengorganisasikan dan membersihkan data memakan waktu sampai 60 persen.

![](https://storage.googleapis.com/dqlab-image/images/data-scientist-survey.jpg)

## 1. Konsep Data Preparation

Dengan demikian, keterampilan untuk melakukan data preparation atau saat ini sering disebut sebagai data wrangling adalah mutlak untuk seluruh data scientist maupun data analyst.

**Lalu apa saja yang dilakukan di proses ini?**

**Data wrangling** adalah proses membaca data dari berbagai sumber dan mengubah isi dan struktur sehingga dapat digunakan untuk analisa.

**Data cleansing** biasanya melibatkan isi yang perlu diubah karena kadang data dimasukkan dari sistem yang berbeda. Bertolak belakang dengan anggapan bahwa dengan sistem, data akan bersih dan standar. Pada kenyataannya, bisnis berkembang lebih cepat dibandingkan dengan pembuatan sistem sehingga banyak design diubah di tengah jalan untuk mengakomodir hal ini, dan isi menjadi "berantakan". Penyebab utama lainnya tentunya adalah sistem entri data yang manual.

Contoh yang paling sering adalah informasi pelanggan (customer). Di satu sistem namanya boleh memasukkan gelar, dan di satu sistem tidak boleh... jadinya ada dua nama yang serupa tapi tak sama sebagai berikut: `"Agus Cahyono S.Kom."` dan `"Cahyono, Agus"`.

## 2. Missing Value

Dalam perjalanannya sebagai data analyst R, pasti akan menghadapi kolom dengan sebagian data tidak terisi atau kosong. Ini disebut dengan missing value atau nilai yang hilang.

Menyadari hal ini adalah satu tahap penting karena kita akan sadar bahwa hal tersebut adalah lumrah terjadi.

Tahap selanjutnya, kita perlu dua hal:

-   Bagaimana missing value direpresentasikan, ini penting sehingga kita bisa identifikasi apakah nilai hilang karena dari awal memang ga ada, apakah karena operasi matematika, dan lain-lain.

-   Dengan mengetahui representasi ini, kita dapat melakukan sesuatu terhadapnya. Atau singkat dapat dikelola (manage) dengan baik.

Kedua hal tersebut sangat penting terutama bagi Anda yang berangkat dari SQL ataupun bahasa programming lain, dimana ada satu reprentasi missing value saja, yaitu NULL.

### 2.1 NA (Not Available)

NA adalah representasi utama dari missing value di R, dan merupakan suatu nilai atomik. Artinya posisi NA sama dengan contoh nilai-nilai atomik bilangan seperti 1, 2 atau 100. Juga sama dengan contoh nilai karakter seperti "a", "b", atau "g".

Karena angka dan karakter seperti contoh di atas sering disebut sebagai konstanta, maka NA adalah konstanta untuk missing value.

Sebagai contoh, jika kita ketikkan NA di console maka akan muncul hasil berikut :

```{r}
#Ketik nilai NA
NA
#Tampilkan type dari NA dengan function typeof
typeof(NA)
```

Angka \[1\] adalah posisi index dari konstanta (yang selalu bernilai 1) dan NA adalah nilainya sendiri. Dan NA ini secara default adalah representasi missing value untuk tipe data logical.

**\*Fungsi is.na**

Misalkan untuk periksa suatu variabel x yang bernilai 3 -- yang sebelumnya kita juga telah memasukkan angka yang sama

```{r}
x <- 3
x == 3
```

Maka hasil eksekusi perintah di atas akan menghasilkan nilai TRUE. Nah, ini tidak berlaku untuk NA. Jadi jika nilai x kita isi dan cek dengan cara yang sama sebagai berikut.

```{r}
#Buat variable x yang diisi dengan nilai NA
x<-NA
#Pengecekan variable x dengan nilai NA menggunakan operator ==
x == NA

```

Nah, untuk mengatasi hal ini R menggunakan function bernama is.na dengan input berupa konstanta atau variabel. Mari kita ubah simbol == contoh di atas menggunakan function is.na seperti berikut.

```{r}
#Pengecekan variable x dengan nilai NA menggunakan function is.na
is.na(x)
```

Jika dihubungkan dengan tipe data lain di R seperti vector -- dimana isinya harus seragam tipe datanya -- maka vector tersebut hanya boleh berisi nilai TRUE dan FALSE.

Sebagai perbandingan, mari kita lihat contoh pembuatan satu vector dengan isi campuran dari integer dan logical berikut.

```{r}
c(1, 2, FALSE, 3)
```

Terlihat bahwa `FALSE` di atas dikonversi (beradaptasi) menjadi 0. Adaptasi ini juga disebut dengan `coerce` di dokumentasi R.

**Lalu bagaimana dengan missing value NA?**

NA juga memiliki konstanta yang digunakan untuk beradaptasi, yaitu:

-   `NA_integer_` untuk representasi tipe data "integer"

-   `NA_real_` untuk representasi tipe data "double"

-   `NA_complex_` untuk representasi tipe data "complex"

-   `NA_character_` untuk representasi tipe data "character"

Dan semuanya memiliki nilai NA. Jika kita cek tipe data dari salah satu variasi missing value NA sebagai berikut :

```{r, eval=FALSE}
typeof(NA_integer_)
typeof(NA_real_)
typeof(NA_complex_)
typeof(NA_character_)
is.na(NA_integer_)
is.na(NA_real_)
is.na(NA_complex_)
is.na(NA_character_)
```

Maka hasilnya akan seperti ini :

`[1] "integer"`

`[1] "double"`

`[1] "complex"`

`[1] "character"`

`[1] TRUE`

`[1] TRUE`

`[1] TRUE`

`[1] TRUE`

### 2.2 NULL

NULL adalah nilai yang banyak digunakan di bahasa pemrograman lain ataupun SQL (Structured Query Language) untuk merepresentasikan objek yang tidak ada atau null object (missing object) atau nilai yang tidak ada (missing value).

Di dalam R, missing value telah direpresentasikan dengan NA. Nah, untuk missing object inilah kita menggunakan NULL di R. Atau lebih detilnya, NULL adalah suatu object khusus di R yang digunakan untuk merepresentasikan nilai atau object yang tidak terdefinisikan.

**\*Perbedaan NA dan NULL**

Berikut adalah contoh variabel vector yang mengandung 7 elemen termasuk NA dan NULL.

```{r}
#Membuat vector dengan 7 elemen termasuk NA dan NULL
isi.vector <- c(1,2,3,NA, 5, NULL, 7)

```

#Membuat vector dengan 7 elemen termasuk NA dan NULL isi.vector \<- c(1,2,3,NA, 5, NULL, 7)

```{r}
#Menghitung jumlah elemen dari isi.vector
length(isi.vector)

```

Hasilnya adalah 6, padahal kita memasukkan 7 elemen. Dengan demikian terlihat bahwa NULL memang mewakili undefined object dan tidak dianggap oleh vector. Dengan demikian tidak menjadi bagian dari vector.

### 2.3 NaN (Not A Number)

NaN adalah representasi khusus untuk angka. Singkatan dari Not a Number, ini adalah representasi operasi matematika yang tidak bisa diwakili oleh angka apapun. Sering sekali bisa dianggap missing value tapi untuk hasil perhitungan.

Contoh perhitungan yang menghasilkan NaN adalah ketika angka 0 dibagi dengan 0. Ini tidak bisa dirasionalkan, sehingga NaN adalah representasi yang paling tepat.

```{r}
#Hitung kalkulasi 0 dibagi dengan 0
0/0

```

## 3. Factor

**Factor** adalah suatu variable di R yang menyimpan daftar nilai-nilai kategori atau nominal.

Berikut adalah beberapa contoh daftar nilai kategori yang bisa disimpan dalam factor:

-   Nama bulan: Januari, Februari, Maret.

-   Jenis pakaian: Atasan, Jeans, Rok, Kaos.

-   Satuan berat: kg, mg, ton, kwintal.

-   dan lain-lain.

Dengan demikian,  factor menyimpan nilai-nilai yang terbatas (diskrit). Nama bulan terdiri dari 12 nilai yaitu dari Januari s/d Desember. Jika tidak terbatas atau kontinu, misalkan angka berat seperti 64.5 kg, 11.2 kg, 80.39 kg, dan seterusnya -- maka ini tidak bisa digolongkan sebagai *factor*.

Karena sifat data dengan nilai terbatas ini, factor sering disebut juga sebagai *categorical variable* atau variabel kategorik.

**Kenapa Factor, dan Kapan Sebaiknya Digunakan?**

**Factor** adalah variabel yang sangat penting untuk digunakan pada kasus analisa statistik, menggambar grafik (*plotting*), pemodelan regresi ataupun *machine learning*.

Sebagai contoh kasus, maka fungsi plotting pada library ggplot2 akan mampu mengambil variabel sebagai *legend* jika direpresentasikan sebagai factor.

![](images/ssfactor.png)

Banyaknya function yang menggunakan factor dikarenakan dengan adanya factor ini maka nilai kategoris lebih mudah diolah dan dianalisa. Sehingga kita sebaiknya menggunakan factor ketika kita ingin :

-   memastikan bahwa variable yang kita gunakan memiliki data terbatas (diskrit)

-   dan menginformasikan kepastian ini kepada function atau model analisa yang kita gunakan

**\*NA, NaN, NULL pada saat pembentukan Factor**

NA, NULL dan NaN adalah tiga nilai khusus untuk merepresentasikan missing values atau nilai yang hilang di R. Jika ketiganya dimasukkan ke dalam factor melalui deklarasi vector, maka prinsip berikut tetap berlaku:

-   Na dan NaN akan menjadi bagian dari isi factor,

-   NULL akan dihilangkan Hanya NaN yang akan dikenali sebagai levels

Sebagai contoh, jika kita membuat factor dengan nilai berikut.

```{r}
#Buatlah variable factor.lokasi dengan isi berupa vector c("Bandung", "Jakarta", NA, "Jakarta", NaN, "Medan", NULL, NULL, "Bandung")

factor.lokasi <- factor(c("Bandung", "Jakarta", NA, "Jakarta", NaN, "Medan", NULL, NULL, "Bandung"))

#Tampilkan factor.lokasi
factor.lokasi


```

Terlihat nilai NULL dibuang di tampilan isi factor, kemudian pada levels nilai NA juga dibuang.

```{r}
#Tampilkan panjang dari variable factor.lokasi
length(factor.lokasi)
```

Hanya nilai NULL yang tidak terhitung sebagai bagian dari factor.

Urutan levels pada Factor

```{r}
nama.bulan <- factor(c("Februari","April","Januari", "Maret","Januari","Maret"))

nama.bulan

```

Data pada levels disesuaikan dengan abjad dan hanya menampilkan satu jenis data unik.

Maka untuk mengurutkan sesuai keinginan kita dapat memakai :

```{r}
nama.bulan <- factor(c("Februari","April","Januari", "Maret","Januari","Maret")
,levels = c("Januari","Februari","Maret", "April"))

#> Tampilkan Nama bulan sesuai kalender
nama.bulan
```

## 4. Profiling Datasets

Misal Dataset yang akan kita gunakan adalah data wilayah dan kepadatan kependudukan pemerintah provinsi DKI Jakarta tahun 2013.

Sumber dataset ini dapat didownload dari data.go.id atau dengan url berikut:

<https://storage.googleapis.com/dqlab-dataset/datakependudukandki-dqlab.csv>

Data kependudukan dipilih karena hampir seluruh organisasi, termasuk bisnis dan institusi pemerintah memerlukan ini untuk mengambil keputusan strategik. Sebagai contoh,

-   dimana saya perlu membuka toko atau kantor cabang?

-   Produk apa yang bakal laku di area tersebut?

Kemudian struktur dari dataset ini perlu diolah lebih lanjut agar optimal. Atas dasar kedua alasan inilah, data kependudukan dipilih untuk **data wrangling** dengan R.

Dan ini adalah tampilan jika data tersebut dibuka di aplikasi Excel :

![](images/ssexclprep.png)

Terlihat bahwa ada 12 kolom (header dengan huruf H s/d S) yang kosong. Ini akan terbaca sebagai missing value.

Data tersebut memiliki 25 variable kolom dengan penjelasan sebagai berikut:

-   **TAHUN:** Tahun

-   **NAMA PROVINSI:** Nama provinsi di DKI Jakarta, dan nilainya hanya ada satu

-   **NAMA KABUPATEN/KOTA:** Nama kabupaten/kota di DKI Jakarta

-   **NAMA KECAMATAN:** Nama kecamatan di DKI Jakarta

-   **NAMA KELURAHAN:** Nama kelurahan di DKI Jakarta

-   **LUAS WILAYAH (KM2):** Luas wilayah (km persegi)

-   **KEPADATAN (JIWA/KM2):** Kepadatan penduduk (jiwa/km2)

-   **35-39 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 35-39 tahun

-   **35-39 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 35-39 tahun

-   **40-44 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 40-44 tahun

-   **40-44 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 40-44 tahun

-   **45-49 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 45-49 tahun

-   **45-49 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 45-49 tahun

-   **50-54 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 50-54 tahun

-   **50-54 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 50-54 tahun

-   **55-59 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 55-59 tahun

-   **55-59 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 55-59 tahun

-   **60-64 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 60-64 tahun

-   **60-64 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 60-64 tahun

-   **65-69 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 65-69 tahun

-   **65-69 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 65-69 tahun

-   **70-74 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur 70-74 tahun

-   **70-74 Perempuan**: Jumlah penduduk perempuan dengan rentang umur 70-74 tahun

-   **\>75 Laki-Laki**: Jumlah penduduk laki-laki dengan rentang umur di atas 75  tahun

-   **\>75 Perempuan**: Jumlah penduduk perempuan dengan rentang umur di atas 75 tahun  

Hampir seluruh kolom berisi nilai angka, kecuali empat kolom berikut: **NAMA PROVINSI**, **NAMA KABUPATEN/KOTA**, **NAMA KECAMATAN**, dan **NAMA KELURAHAN**.

### 4.1 Fungsi str

Adalah fungsi untuk mengenal atau melakukan profile tiap dataset yang sudah dibaca ke dalam R -- dan secara sederhana di R dapat kita lakukan dengan perintah str.

`str` akan menyajikan informasi tiap kolom dataset dalam format yang compact -- satu baris informasi saja per row. Pendekatan singkat dan jelas ini membuat `str` menjadi function favorit dan efektif untuk mengenal data di tahap awal.

```{r}
#Membaca dataset dengan read.csv dan dimasukkan ke variable penduduk.dki
penduduk.dki <- read.csv("https://storage.googleapis.com/dqlab-dataset/dkikepadatankelurahan2013.csv", sep=",")

#> Tampilkan str data
str(penduduk.dki)

```

Berikut adalah penjelasan dari hasil profiling tersebut:

-   `'data.frame'`: merupakan tipe data dari variable penduduk.dki.

-   `267 obs`: menunjukkan adanya 267 total baris data (row) dari dataset ini.

-   `37 variables`: menunjukkan adanya 37 kolom data pada dataset ini.

### 4.2 Fungsi Summary

Kita dapat juga menggunakan function summary untuk melihat kondisi dataset kita dalam bentuk ringkasan yang lebih detil.

Sebagai contoh, untuk melihat summary dari variable penduduk.dki maka kita gunakan konstruksi berikut.

```{r}
#Membaca dataset dengan read.csv dan dimasukkan ke variable penduduk.dki
penduduk.dki <- read.csv("https://storage.googleapis.com/dqlab-dataset/dkikepadatankelurahan2013.csv", sep=",")

summary(penduduk.dki)
```

Untuk angka, maka akan muncul statistik minimum, maximum, mean, meadian, 1st quantile, dan 3rd quantile. Sedangkan untuk nilai lain akan muncul jumlahnya di dataset.

Dengan demikian, kita menjadi aware atau lebih perhatian karena perilaku yang berbeda ketika menangani kolom kosong dan juga pada saat penamaan variable kolom sehingga kita akan lebih siap untuk **"memperbaiki"** struktur dan isi file tersebut jika diperlukan.

## 5. Transformasi Struktur Data

Pada sesi ini kita melanjutkan atas proses profiling Datasets kependudukan DKI tadi, terlihat juga ada beberapa kolom yang harusnya bisa dijumlahkan menjadi satu kolom -- yaitu kolom 35-39.Perempuan, 40-44.Perempuan, dan seterusnya -- menjadi kolom `jumlah`. Kemudian informasi umur di nama kolom tersebut sebenarnya dapat kita pisahkan menjadi kolom tersendiri.

### 5.1 Fungsi names

Pada bab sebelumnya, kita menggunakan function `str` untuk melihat ringkasan dari struktur nama, tipe data, dan isi dari data.frame hasil pembacaan file.

Namun jika kita hanya ingin melihat nama-nama kolom saja, bisa menggunakan function bernama `names`, dengan konstruksi berikut.

`names(variable)`

```{r}
#Membaca dataset csv
penduduk.dki <-read.csv("https://storage.googleapis.com/dqlab-dataset/dkikepadatankelurahan2013.csv", sep=",")

#Menggunakan names untuk variable penduduk.dki.csv
names(penduduk.dki)
```

**Merubah Nama Kolom**

Function names ini juga bisa digunakan merubah nama kolom pada data.frame. Terlihat dari posisi nomor indeks nama kolom yang ingin diubah, misal kita akan merubah nama kolom TAHUN menjadi PERIODE (posisi indeks 1/\[1\]) dan NAMA KECAMATAN menjadi KEPANEWONAN (posisi indeks 4/\[4\]) dari dataset maka untuk merubahnya kita gunakan konstruksi berikut:

```{r}
#Membaca dataset csv
penduduk.dki <-read.csv("https://storage.googleapis.com/dqlab-dataset/dkikepadatankelurahan2013.csv", sep=",")

#> Ubah nama kolom tahun menjadi PERIODE
names(penduduk.dki)[1] <- "PERIODE"

#> Ubah nama kolom Nama Kecamatan jadi Kepanewonan
names(penduduk.dki)[4] <- "KEPANEWONAN"

#> Eksekusi fungsi
names(penduduk.dki)

```

### 5.2 Operator %in%

Pada bab Profiling Datasets diatas, data.frame hasil pembacaan read.csv memiliki kolom X, X.1, X.2, X.3 s/d kolom X.11 yang kosong semua dan sebenarnya tidak diperlukan.

Kita dapat menghilangkan kolom-kolom ini dengan contoh berikut:

|                                                                               |                                                        |
|-----------------------------------------|-------------------------------|
| **Komponen**                                                                  | **Deskripsi**                                          |
| `penduduk.dki.csv`                                                            | Variable data frame dari hasil pembacaan dataset       |
| `[ , …]`                                                                      | Artinya data frame mengambil kolom ke ...              |
| `!`                                                                           | Tanda bukan                                            |
| `names(penduduk.dki.csv)`                                                     | Daftar dari semua kolom dari variable penduduk.dki.csv |
| `%in%`                                                                        | Operator untuk mengambil data dari vector setelahnya   |
| `c("X","X.1","X.2","X.3","X.4","X.5","X.6","X.7","X.8","X.9","X.10", "X.11")` | Vector dari nama semua kolom yang akan dibuang         |

```{r}
#Membaca dataset csv
penduduk.dki <-read.csv("https://storage.googleapis.com/dqlab-dataset/dkikepadatankelurahan2013.csv", sep=",")

#Membuang kolom X, X.1, X.2 s/d X.11
penduduk.dki <- penduduk.dki[,!names(penduduk.dki) %in% c("X", "X.1","X.2","X.3","X.4","X.5","X.6","X.7","X.8","X.9","X.10", "X.11")]

#> Eksekusi function
names(penduduk.dki)

```

Atau terjemahan dari seluruh konstruksi tersebut adalah mengambil data dari data.frame penduduk.dki.csv dengan kolom-kolom yang tidak termasuk pada "X", "X.1", "X.2", "X.3", dan seterusnya sampai dengan "X.11"

### 5.3 Normalisasi Data dari Kolom ke Baris

Kalau kita perhatikan empat kolom data pada table di bawah ini -- yang diambil dari dataset kependudukan DKI -- maka dua kolom terakhir (35-39 laki-laki dan 35-39 Perempuan) sebenarnya mengandung tiga variable, yaitu: `rentang umur`, `jenis kelamin`, dan `jumlah penduduk.`

|                |                |                 |                 |
|----------------|----------------|-----------------|-----------------|
| NAMA.KECAMATAN | NAMA.KELURAHAN | 35-39.Laki-Laki | 35-39.Perempuan |
| GAMBIR         | GAMBIR         | 166             | 174             |
| GAMBIR         | CIDENG         | 850             | 748             |
| GAMBIR         | PETOJO UTARA   | 954             | 920             |

Dan dari sisi prinsip kerapian data, satu variable data harusnya masing-masing menempati satu kolom tersendiri. Dan berdasarkan prinsip tersebut, kolom "NAMA.KECAMATAN" dan "NAMA.KELURAHAN" sudah memenuhi persyaratan. Namun kolom "35-39.Laki-Laki" dan kolom "35-39.Perempuan" tidak memenuhi persyaratan.

Kita akan coba men-transformasi struktur ini dengan dua tahap:

-   Melakukan normalisasi kolom dari baris ke kolom

-   Memisahkan kolom

Kita mulai dari tahap pertama, dimana kita akan merubah struktur data di atas agar menjadi seperti ini :

|                |                |                 |        |
|----------------|----------------|-----------------|--------|
| NAMA.KECAMATAN | NAMA.KELURAHAN | DEMOGRAFIK      | JUMLAH |
| GAMBIR         | GAMBIR         | 35-39.Laki-Laki | 166    |
| GAMBIR         | GAMBIR         | 35-39.Perempuan | 174    |
| GAMBIR         | CIDENG         | 35-39.Laki-Laki | 850    |
| GAMBIR         | CIDENG         | 35-39.Perempuan | 748    |
| GAMBIR         | PETOJO UTARA   | 35-39.Laki-Laki | 954    |
| GAMBIR         | PETOJO UTARA   | 35-39.Perempuan | 920    |

Terlihat nama kolom `"35-39.Laki-Laki"` dan `"35-39.Perempuan"` dipivot menjadi nilai baris data di bawah kolom `"DEMOGRAFIK".`

Kemudian angka-angka jumlah penduduk yang tadinya di bawah kedua kolom tersebut sekarang ada di bawah kolom "`JUMLAH".`

Untuk melakukan transformasi struktur ini, kita akan gunakan function `melt` dari package `reshape2`. Berikut adalah contoh penggunaannya:

```{r}
#> Load Paket xlsx
library(openxlsx)
library(reshape2)
penduduk.dki.xlsx <- read.xlsx(xlsxFile="https://storage.googleapis.com/dqlab-dataset/dkikepadatankelurahan2013.xlsx")

#Transformasi kolom dataset penduduk.dki.xlsx, disimpan ke variable penduduk.dki.transform
penduduk.dki.transform <- melt(data=penduduk.dki.xlsx, id.vars=c( "NAMA.KECAMATAN", "NAMA.KELURAHAN"), measure.vars = c("35-39.Laki-Laki", "35-39.Perempuan"), variable.name = "DEMOGRAFIK", value.name="JUMLAH")

#Menampilkan variable penduduk.dki.transform
penduduk.dki.transform

```

Sehingga penjelasan untuk konstruksi fungsi diatas akan seperti berikut :

|                                                          |                                                                                                                                   |
|-----------------------|-------------------------------------------------|
| **Elemen**                                               | **Deskripsi**                                                                                                                     |
| `melt`                                                   | Function untuk melakukan transformasi dari kolom ke baris                                                                         |
| `data=penduduk.dki.xlsx`                                 | Argumen data yang diisi dengan variable penduduk.dki.xlsx, yaitu data frame hasil pembacaan dari file Excel data kependudukan DKI |
| `id.vars= c( "NAMA.KECAMATAN", "NAMA.KELURAHAN")`        | Vector dari field-field kolom yang akan menjadi identitas -- dimana field tidak akan mengalami transformasi tapi tetap diambil    |
| `measure.vars = c("35-39.Laki-Laki", "35-39.Perempuan")` | Nama variable hasil transformasi                                                                                                  |
| `variable.name= "DEMOGRAFIK"`                            | Nama variable untuk menampung nama kolom transformasi                                                                             |
| `value.name= "JUMLAH"`                                   | Nama variable untuk menampung isi data dari kolom transformasi                                                                    |
