---
title: "Topik 3 | Data Tidy"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

## 1. Konsep Data Tidy

Sebelum memulai analisa terhadap data yang kita miliki, umumnya kita akan merapikan data yang akan kita gunakan. Tujuannya adalah agar data yang akan digunakan sudah siap untuk dilakukan analisa, dimana pada dataset perlu adanya kejelasan antara variabel dan nilai (value), serta untuk mempermudah dalam memperoleh informasi pada data. Sebelum kita melakukan analisa di dataset tersebut, kita harus tahu dulu apa saja syarat suatu dataset dikatakan rapi `(tidy)`. Berikut adalah syaratnya:

1.  Setiap variabel harus memiliki kolomnya sendiri

2.  Setiap observasi harus memiliki barisnya sendiri

3.  Setiap nilai berada pada sel tersendiri

Ketiga syarat tersebut saling berhubungan sehingga jika salah satu syarat tersebut tidak terpenuhi, maka dataset belum bisa dikatakan `tidy`. Ketiga syarat tersebut dapat divisualisasikan :

```{r echo = FALSE, out.width = "70%", fig.align = "center"}

knitr::include_graphics("https://r4ds.hadley.nz/images/tidy-1.png")

```

## 2. Data Tidy (tidyverse)

Dalam bab ini kita akan menggunakan element `tidyR`, sebuah paket yang menyediakan banyak tools untuk membantu merapikan kumpulan data yang berantakan, tidyR adalah bagian dari `tidyverse`.

```{r}
#> Load paket tidyverse
library(tidyverse)
```

Contohnya tabel dibawah ini menunjukkan data yang sama yang disusun dalam tiga cara berbeda. Setiap dataset menunjukkan nilai yang sama dari empat variabel: negara, tahun, populasi, dan jumlah kasus TB (tuberkulosis), tetapi setiap dataset mengatur posisi nilai-nilainya dengan cara yang berbeda.

```{r}
#> Tampilkan Tabel 1
table1

#> Tampilkan Tabel 2
table2

#> Tampilkan Tabel 3
table3
```

Dapat dilihat bahwa `tabel 1` akan jauh lebih mudah dipahami untuk proses analisis dalam `tidyverse` karena rapi **(tidy)**

Maka dari itu, terdapat keuntungan mengapa data harus rapi (tidy) :

-   Konsistensi dalam menyimpan data, jika kita memiliki struktur data yang konsisten, akan lebih mudah untuk mempelajari tools yang dipakai untuk mem-prosesnya karena memiliki keseragaman.

-   Lebih mudah untuk menempatkan variabel dalam kolom karena memungkinkan transformasi data yang rapi (tidy) secara terstruktur.

### 2.1 Paket tidyverse

Ada sejumlah package R yang dapat digunakan untuk mengatur form data rapi (tidy) :

-   `ggplot2`: sistem plot berdasarkan tata grafik

-   `magrittr`: mendefinisikan operator untuk fungsi chaining bersama `%>%` dalam serangkaian operasi pada data

-   `dplyr`: serangkaian fungsi (cepat) untuk bekerja dengan frame data

-   `tidyr`: data yang mudah dirapikan dengan `spread()` fungsi AND `gather()`

Misalnya kita akan manampilkan rentang data dengan `ggplot`

```{r}
#> Hitung rate per 10,000
table1 |>
  mutate(rate = cases / population * 10000)

#> Hitung total cases per tahun
table1 |> 
  group_by(year) |> 
  summarize(total_cases = sum(cases))


#> Visualisasi perubahan setiap waktu
ggplot(table1, aes(x = year, y = cases)) +
  geom_line(aes(group = country), color = "grey50") +
  geom_point(aes(color = country, shape = country)) +
  scale_x_continuous(breaks = c(1999, 2000)) 

```

## 3. Pivot Data

Pivot Data berfungsi untuk merangkum, mengelompokkan, mengeksplorasi, mempresentasikan , menghitung, dan menganalisa data. Kita bisa memanipulasi dan mengubah layout atau tampilan data sesuai kebutuhan.

### 3.1 Cara Kerja Pivot

Misalkan kita memiliki tiga pasien dengan `id_pasien` Ali, Budi, dan Candra, dan kita melakukan dua pengukuran tekanan darah pada setiap pasien. Kita akan membuat data dengan fungsi `tribble()` :

```{r}
data_pasien <- tribble(
  ~id_pasien,  ~tekanan_darah1, ~tekanan_darah2,
   "Ali",  100,  120,
   "Budi",  140,  115,
   "Candra",  120,  125
)

data_pasien
```

Lalu kita akan merapikan data agar lebih mudah dalam analisa tekanan darah pasien dengan menambah kolom pengukuran dan nilai pada fungsi `pivot longer`:

```{r}
data_pasien |> 
  pivot_longer(
    cols = tekanan_darah1:tekanan_darah2,
    names_to = "pengukuran",
    values_to = "nilai"
  )
```

Sehingga gambaran proses `pivot` data akan seperti berikut :

```{r echo = FALSE, out.width = "70%", fig.align = "center"}

knitr::include_graphics("https://r4ds.hadley.nz/diagrams/tidy-data/variables.png")

```

### 3.2 Visualisasi Pivot Data

Misal kita akan menganalisa data pada datasets billboard peringkat lagu tahun 2000

```{r}
#> Load datasets billboard
billboard
```

Tiga kolom pertama ( `artist` , `track` dan `date.entered` ) adalah variabel yang mendeskripsikan lagu. Kemudian 76 kolom ( wk1 - wk76 ) yang menggambarkan peringkat lagu di setiap minggu. Lalu, kita akan merapikan data dengan menambah kolom variabel `(week)` dan nilai sel adalah `(rank).`

Untuk merapikan data ini, kita akan menggunakan `pivot_longer()` :

```{r}
#> Pangggil fungsi pivot
billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
  
#> Nama variabel baru  
    names_to = "week",

#> Nilai Variabel baru
    values_to = "rank",
    values_drop_na = TRUE
  )


```

-   `cols` untuk menentukan kolom mana yang perlu dipivot, Argumen ini menggunakan sintaks yang sama seperti select() jadi di sini kita bisa menggunakan `!c(artist, track, date.entered)` atau `starts_with("wk").`

-   `names_to` untuk menamai variabel yang disimpan dalam nama kolom, dengan variabel `week`.

-   `values_to` untuk menamai variabel yang disimpan dalam nilai sel, pada variabel `rank`.

Selanjutnya kita ubah type data week dengan `parse_number` agar menjadi angka sebagai variabel perhitungan

```{r}
billboard_longer <- billboard |> 
  pivot_longer(
    cols = starts_with("wk"), 
    names_to = "week", 
    values_to = "rank",
    values_drop_na = TRUE
  ) |> 
  mutate(
    week = parse_number(week)
  )
billboard_longer
```

Kemudian kita memvisualisasikan bagaimana peringkat lagu dari waktu ke waktu dengan fungsi `ggplot`

```{r}

#> Visualisasi pivot data
billboard_longer |> 
  ggplot(aes(x = week, y = rank, group = track)) + 
  geom_line(alpha = 0.25) + 
  scale_y_reverse()
```

Dapat dilihat bahwa `Plot line` menunjukkan hanya sedikit lagu yang bertahan di 100 teratas selama lebih dari 20 minggu.
